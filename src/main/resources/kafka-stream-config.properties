# A unique ID for your Kafka Streams application is mandatory.
spring.cloud.stream.kafka.streams.binder.application-id=pageview-counter-app-v1

# 2. FUNCTION DEFINITION
# This creates a processing pipeline. The pipe '|' symbol chains the functions,
# sending the output KTable from 'counter' to the input of the 'logger' consumer.
spring.cloud.function.definition=counter|logger

# 3. BINDING CONFIGURATION
# This binds the 'counter' function's input ('counter-in-0') to the 'pageviews' topic.
# This is where StreamBridge will send the initial data.
spring.cloud.stream.bindings.counter-in-0.destination=pageviews

# This binds the 'counter' function's output ('counter-out-0') to the 'counts' topic.
# The 'logger' function will automatically consume from this topic because of the function chain.
spring.cloud.stream.bindings.counter-out-0.destination=counts

# 4. SERIALIZATION/DESERIALIZATION (SerDe) CONFIGURATION
# Configure the input binding to properly deserialize the incoming JSON into a PageView object.
spring.cloud.stream.kafka.streams.bindings.counter-in-0.consumer.value-serde=org.springframework.kafka.support.serializer.JsonSerde
spring.kafka.properties.spring.json.trusted.packages=*
spring.kafka.properties.spring.json.value.default.type=com.github.madz0.sdkafka.kafkastream.PageView

# Configure the output binding to properly serialize the Long value from the KTable.
spring.cloud.stream.kafka.streams.bindings.counter-out-0.producer.value-serde=org.apache.kafka.common.serialization.Serdes$LongSerde

spring.cloud.stream.kafka.binder.brokers=localhost:9092